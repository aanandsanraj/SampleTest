from logging import INFO, captureWarnings, info, raiseExceptions
import os , requests, json
from jinja2.environment import Template
from pandas.core.frame import DataFrame
import pandas as pd
import pytz
import smtplib
from dotenv import load_dotenv
from datetime import date, datetime, timedelta
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from email.mime.application import MIMEApplication
from jinja2 import Environment,FileSystemLoader,select_autoescape
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import logging

CURR_PATH = os.path.dirname(os.path.realpath(__file__))

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

#Load environment Variable << SECERTS >>
load_dotenv()

LOGFILENAME = os.path.join(CURR_PATH,r"log\run{0}.log").format(datetime.now().strftime("%Y%m%d"))

#logging.basicConfig(filename=LOGFILENAME,encoding="utf-8",level=logging.INFO,filemode="a")
logging.basicConfig(filename=LOGFILENAME,level=logging.INFO,filemode="a")

#Global variables

# 1. Orchestrator Endpoint
AUTH_ENDPOINT="https://uipath.khc.local/api/Account/Authenticate"
#JOBS_ENDPOINT="https://uipath.khc.local/odata/Jobs?%24filter=State%20eq%20'Running'%20or%20State%20eq%20'Pending'&%24count=true"
JOBS_ENDPOINT="https://uipath.khc.local/odata/Jobs?%24filter=State%20eq%20'Running'&%24count=true"
LOG_ENDPOINT="https://uipath.khc.local/odata/RobotLogs?%24filter=JobKey%20eq%20{0}&%24orderby=TimeStamp%20desc&%24top=1&%24count=true"
SSL_VERIFY= False
OUTPUT_FILE= os.path.join(CURR_PATH,"MonitoringData.csv")
MASTER_OUTPUT_FILE=os.path.join(CURR_PATH,"Master_MonitoringData.csv")
COLUMNS_TO_KEEP=["Key","StartTime","State","Source","SourceType","CreationTime","ReleaseName","HostMachineName","tenant","recent_logMessage","recent_logTimeStamp","last_log_entry_was_on","job_pending_for","thresholdbreach"]

# 2. TimeZones
from_zone = pytz.UTC
to_zone   = pytz.timezone("Asia/Calcutta")

# 3. Getting Environment Variables
USER = {
        "userid": os.getenv("AUTH_USERNAME"),
        "password": os.getenv("AUTH_PASSWORD")
       }
TENANTS = os.getenv("UIPATH_TENANT").split(",")
#TENANTS = ["Molex", "KBS", "INVISTA", "KII", "GP" ]
#TENANTS = ["FHR"]

# 4. Email Related Data
SMTP_SERVER = os.getenv("SMTP_SERVER")
SMTP_PORT   = os.getenv("SMTP_PORT")
SMTP_FROM_ADDRESS  = os.getenv("SMTP_FROM_ADDRESS")
#SMTP_TO_ADDRESS = "sainath.s@kochgs.com"
SMTP_TO_ADDRESS = "sainath.s@kochgs.com;frosh.ahamed@kochgs.com;Pavan.Kumar@kochgs.com;shreya.mandal@kochgs.com"
SMTP_SUBJECT = "Automated JOB_Monitoring_Email"


# 5. Threshold
last_log_threshold = 45  #minutes
pending_threshold  = 60  #minutes

# 6. Exclusion List
EXCLUDED_PROCESS = []

exlcusionFilePath = os.path.join(CURR_PATH,"exclusionList.txt")

if os.path.exists(exlcusionFilePath):
    with open(exlcusionFilePath,"r") as exclusion:
        x = exclusion.readlines()
        EXCLUDED_PROCESS = [eachline.replace("\n","").strip() for eachline in x ]

def customlog(message,level):
    messageTOLog = "[{0}] -> Message: {1}".format(datetime.now(),message)
    #print(messageTOLog)
    if level == "info":
        logging.info(messageTOLog)
    elif level == "warning":
        logging.warning(messageTOLog)
    elif level == "error":
        logging.error(messageTOLog)

def timezoneConversion(ipdate):
    '''
        functionName: timezoneConversion
        input       : ISO DATE STRING
        output      : IST Time in datetime Object
    '''
    dt_timestamp = datetime.strptime(ipdate,"%Y-%m-%dT%H:%M:%S.%fZ")
    UTC_time = dt_timestamp.replace(tzinfo=from_zone)
    return UTC_time.astimezone(to_zone)

def main():
    '''
        Main Module
        Loop through the tenant List and perform below activites
            1. Get Auth Token
            2. Get Running and Pending Jobs
            3. Get Recent Log Record of the Running Job
            4. Calculate the Elapsed time from Recent Log Time for Running Jobs and Elapsed time from Schedule Creation Time for pending Jobs.
            5. Put the data into a HTML Template
            6. Send out the Email
    '''
    try:
        masterDataFrame        = pd.DataFrame()
        masterthresholdBreachedData  = pd.DataFrame()


        if os.path.exists(OUTPUT_FILE):
            # print("Removing old Output File:{0}".format(OUTPUT_FILE))
            customlog("Removing old Output File:{0}".format(OUTPUT_FILE),"info")
            os.remove(OUTPUT_FILE)
        # exit()
        for tenant in TENANTS:
            customlog("Running for Tenant: {0}".format(tenant),"info")
            # 1. Get the Token
            result = getToken(tenant,USER)

            if "token" in result:
                # 2. Get the Running and Pending Jobs along with the Last Log Message Created Time and Dump the results to a csv
                returnDT = getJobsAndLogs(tenant,result["token"] )

 
                
                if not returnDT.empty:
                                   

                    returnDT = returnDT[ ~returnDT["ReleaseName"].isin(EXCLUDED_PROCESS)]
                
                

                    # Dump the Data to Master File before any manipulations
                    # if masterDataFrame.count == 0:
                    #     masterDataFrame = returnDT.copy(deep=True)
                    # else:
                    #     masterDataFrame = masterDataFrame.append(returnDT,ignore_index=True)
                    
                    if os.path.exists(MASTER_OUTPUT_FILE):
                        returnDT.to_csv(MASTER_OUTPUT_FILE,index=False,mode="a",header=False)
                    else:
                        returnDT.to_csv(MASTER_OUTPUT_FILE,index=False,mode="w") 
                
                    customlog("Running Job Count: {0}".format(len( returnDT[returnDT["State"]=="Running"] )),"info" )
                    #customlog("Pending Job Count: {0}".format(len( returnDT[returnDT["State"]=="Pending"] )), "info")
                    
                    customlog("Jobs Breached Threshold of {1} : {0}".format(len( returnDT[returnDT["last_log_entry_was_on"] >= timedelta(minutes=last_log_threshold)  ] ), timedelta(minutes=last_log_threshold) ),"info" )

                    #Check for Threshold Breached Data for Running Jobs alone
                    thresholdBreachedData = returnDT[ (returnDT["State"] == "Running") & (returnDT["last_log_entry_was_on"] >= timedelta(minutes=last_log_threshold) )]

                    if len(thresholdBreachedData):
                        if os.path.exists(OUTPUT_FILE):
                            thresholdBreachedData.to_csv(OUTPUT_FILE,columns=COLUMNS_TO_KEEP,index=False,mode="a",header=False)
                        else:
                            thresholdBreachedData.to_csv(OUTPUT_FILE,columns=COLUMNS_TO_KEEP,index=False)

                        if masterthresholdBreachedData.count == 0:
                            masterthresholdBreachedData = thresholdBreachedData.copy(deep=True)
                        else:
                            masterthresholdBreachedData = masterthresholdBreachedData.append(thresholdBreachedData,ignore_index=True)

                        customlog("Data dumped to {0} file for {1}".format(OUTPUT_FILE,tenant), "info")
                else:
                    customlog("No Active Jobs","info")
            else:
                customlog("Token not Available. Skipping Process","info")
                return None

        if os.path.exists(OUTPUT_FILE):
            # 3. Send the Dump via SMTP to recipents
            emailbody=prepareEmailBody(masterthresholdBreachedData)
            sendmailtoTeam(emailbody)

    except Exception as e:
        print(e)
        raise


def getToken(tenantName,user):
    '''
        Get Token based on the Username,Password and Tenant
    '''
    try:
        payload={
            "tenancyName": tenantName,
            "usernameOrEmailAddress": user["userid"],
            "password": user["password"]
        }

        header={
            "accept": "application/json",
            "Content-Type": "application/json" 
        }

        jsonString_payload = json.dumps(payload)
        response = requests.post(AUTH_ENDPOINT,data=jsonString_payload,headers=header,verify=SSL_VERIFY)
        res_statuscode =  response.status_code
        
        if res_statuscode == 200:
            token = response.json()["result"]
            return {"token": token}
        else:
            raise Exception("Response is not 200 API Call Error - Response : {0}".format(response.text))
    except Exception as e:
        customlog("***Func: getToken => Error:".format(e),"error")
        raise       
        

def getJobsAndLogs(tenantName,token):
    '''
        1. Get Running and Pending Jobs for a Tenant.
        2. Dump the data into a CSV File.
    '''
    headers={
        "Authorization":"Bearer {0}".format(token),
        "accept": "application/json",
        "Content-Type": "application/json" 
    }

    response = requests.get(JOBS_ENDPOINT,headers=headers,verify=SSL_VERIFY)
    result =  response.json()
    if response.status_code == 200:
        returnCount =  result["@odata.count"]
        customlog("As of {1} Active Jobs Count:{0} ".format(returnCount,datetime.now()), "info")
        
        if returnCount == 0:
            return pd.DataFrame()
        
        jobsTable = pd.DataFrame(result["value"])

        jobsTable["tenant"] = tenantName
        jobsTable["recent_logMessage"]     = ""
        jobsTable["recent_logTimeStamp"]   = ""
        jobsTable["last_log_entry_was_on"] = ""
        jobsTable["job_pending_for"]       = ""
        jobsTable["thresholdbreach"]       = False
        jobsTable["running_job_elapsedtime"] = ""

        for index,row in jobsTable.iterrows():
            if row["State"] == "Running":
                timestamp , message = getLogs(token,row["Key"])

                jobsTable.loc[index,"recent_logMessage"]= message
                #jobsTable.loc[index,"recent_logTimeStamp"] = timestamp
                jobsTable.loc[index,"recent_logTimeStamp"] =  timezoneConversion(timestamp)
                jobsTable.loc[index,"last_log_entry_was_on"] = datetime.now().astimezone(to_zone) - timezoneConversion(timestamp)
                jobsTable.loc[index,"running_job_elapsedtime"] =  datetime.now().astimezone(to_zone) - timezoneConversion(row["StartTime"])
                
                if (jobsTable.loc[index,"last_log_entry_was_on"] > timedelta(minutes=last_log_threshold)):
                    jobsTable.loc[index,"thresholdbreach"] = True
                
                jobsTable.loc[index,"StartTime"]= timezoneConversion(row["StartTime"]).strftime("%Y-%m-%d %H:%M:%S")
                
            else:
                jobsTable.loc[index,"job_pending_for"] = datetime.now().astimezone(to_zone) -  timezoneConversion(row["CreationTime"])
                if (jobsTable.loc[index,"job_pending_for"] > timedelta(minutes=pending_threshold)):
                    jobsTable.loc[index,"thresholdbreach"] = True
                jobsTable.loc[index,"CreationTime"]= timezoneConversion(row["CreationTime"]).strftime("%Y-%m-%d %H:%M:%S")
            
        return jobsTable
    else:
        customlog("Func: getJobsAndLogs => API ERROR:".format(response.text),"error")


def getLogs(token,jobKey):
    headers={
        "Authorization":"Bearer {0}".format(token),
        "accept": "application/json",
        "Content-Type": "application/json" 
    }

    response = requests.get(LOG_ENDPOINT.format(jobKey),headers=headers,verify=SSL_VERIFY)
    result =  response.json()
    
    if response.status_code == 200:
        recentLog = result["value"][0]
        return (recentLog["TimeStamp"],recentLog["Message"])
    else:
        customlog("Func: getLogs => API ERROR:{0}".format(response.text),"error")
        return ("","")

def sendmailtoTeam(emailbody=None):
    '''
        Send the dump to Support Team
    '''
    smtpserver = smtplib.SMTP(SMTP_SERVER,SMTP_PORT)

    msg = MIMEMultipart()
    msg["Subject"] = SMTP_SUBJECT
    msg["From"] = SMTP_FROM_ADDRESS
    msg["To"] = SMTP_TO_ADDRESS
    if emailbody: 
        msgText =  MIMEText(emailbody,"html")
    else:
        msgText  = MIMEText("<b>{0}</b>".format("Please check the Attachment"),"html")
    msg.attach(msgText)
    
    # Attach the file with filename to the email
    filename = os.path.abspath(OUTPUT_FILE)
    with open(filename,'rb') as file:
        msg.attach(MIMEApplication(file.read(), Name="JobMonitoring{0}.csv".format(datetime.now().strftime("%Y%m%S_%H%M%S"))))

    smtpserver.sendmail(SMTP_FROM_ADDRESS,SMTP_TO_ADDRESS,msg.as_string())
    smtpserver.quit()
    customlog("JobMonitoring Dump shared via Email sent to {0}".format(SMTP_TO_ADDRESS),"info")


def prepareEmailBody(input_table: DataFrame):
    try:
        env = Environment(loader=FileSystemLoader( os.path.join(CURR_PATH,"templates")),autoescape=select_autoescape)
        template =  env.get_template("template.html")
        #GetPending Jobs
        pendingJobs =  pd.DataFrame()
        pendingJobs = input_table[input_table["State"]=='Pending'] 

        #GetRunning Jobs
        runningJobs =  pd.DataFrame()
        runningJobs = input_table[input_table["State"]=='Running']
        outputHtml = ""

        if len(pendingJobs) and len(runningJobs):
            Pjobdata = pendingJobs.to_dict('records')
            Rjobdata = runningJobs.to_dict('records')
            outputHtml=template.render(title1="Running",title2="Pending",Pjobdata=Pjobdata,Rjobdata=Rjobdata,threshold_limit=last_log_threshold)
        elif len(pendingJobs):
            Pjobdata = pendingJobs.to_dict('records')
            outputHtml=template.render(title2="Pending",Pjobdata=Pjobdata)
        elif len(runningJobs):
            Rjobdata = runningJobs.to_dict('records')
            outputHtml=template.render(title1="Running",Rjobdata=Rjobdata,threshold_limit=last_log_threshold)
        
        return outputHtml
    except Exception as e:
        print("Func: Prepare EmailBody -> Error: {}".format(e))
        customlog("Func: Prepare EmailBody -> Error: {}".format(e),"error")


if __name__ == "__main__":
    try:
        customlog("*************** Process Started ***************","info")
        customlog("Tenants List : {0}".format(TENANTS),info)
        customlog("Excluded Process List: {0}".format(EXCLUDED_PROCESS),"info")
        main()
        customlog("*************** Process Completed ***************","info")
    except Exception as e:
        
        customlog("Main Error:{0}".format(e),"error")

        smtpserver = smtplib.SMTP(SMTP_SERVER,SMTP_PORT)
        msg = MIMEMultipart()
        msg["Subject"] = SMTP_SUBJECT
        msg["From"] = SMTP_FROM_ADDRESS
        msg["To"] = "sainath.s@kochgs.com" 
        msgText =  MIMEText("Error in RUnning Script - Check Log")
        msg.attach(msgText)
    
        # Attach the file with filename to the email
        filename = os.path.abspath(LOGFILENAME)
        with open(filename,'rb') as file:
            msg.attach(MIMEApplication(file.read(), Name="Log.txt".format(datetime.now().strftime("%Y%m%S_%H%M%S"))))

        smtpserver.sendmail(SMTP_FROM_ADDRESS,SMTP_TO_ADDRESS,msg.as_string())
        smtpserver.quit()

        customlog("*************** Process Completed ***************","info")


        



